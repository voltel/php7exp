<?php
namespace App\Model;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{

  /**
   *
   */
   public function getPostById(int $post_id) : Post
   {
     if (empty($post_id)) throw new \InvalidArgumentException('Пустой идентификатор поста post_id в методе ' . __METHOD__);

     return $this->findOneById($post_id);
   }//end of function


  public function getTopPosts(User $o_user, int $n_num = 5) : array
  {
    $c_namespace = __NAMESPACE__;
    $c_dql = <<<DQL
SELECT p FROM {$c_namespace}\Post p WHERE p.user =:user
ORDER BY p.posted_at
DQL;

    // NB! _em
    $o_query = $this->_em->createQuery($c_dql);
    $o_query->setParameter('user', $o_user);
    $o_query->setMaxResults($n_num);

    return $o_query->getResult();
  }//end of fuction

  /**
   *
   */
  public function getPostsBatchArray($n_start_index, $n_max_per_page, $c_sorting_params) {
    // Сортировка элементов в запросе к базе данных
    $c_sorting_order_clause = 'p.id ASC'; // значение по умолчанию
    if (!empty($c_sorting_params)) {
      // пересобрать часть entity + порядок сортировки для запроса
      // так как я не нашёл способа безопасно вставить данные из AJAX запроса в query
      $a_sorting_parts = explode(' ', $c_sorting_params, 2);
      $c_sorting_order = $a_sorting_parts[0];
      $c_sorting_order_field = ['email' => 'u.email', 'posted_at' => 'p.posted_at', 'id' => 'p.id'][$c_sorting_order] ?? 'p.id' ;
      $c_sorting_order_asc = $a_sorting_parts[1] ?? 'ASC';
      $c_sorting_order_clause = $c_sorting_order_field .  ' ' . $c_sorting_order_asc;
    }//endif

      // Получить массив объектов постов
      // .id, p.title, p.description, p.image, u.user, p.posted_at
      $c_dql = <<<DQL
SELECT p, u
FROM App\Model\Post p JOIN p.user u
ORDER BY  {$c_sorting_order_clause}
DQL;

      // в видео-уроке было так (но, я думаю, LEFT и WHERE не нужны)
      // SELECT p, u FROM App\Model\Post p
      // LEFT JOIN p.user u WHERE u.id = p.user


      //
      $a_posts_array = $this->_em->createQuery($c_dql)
        ->setFirstResult($n_start_index)
        ->setMaxResults($n_max_per_page)
        ->getArrayResult();

        return $a_posts_array;
  }//end of function

  /**
   *
   */
  public function getTotalUserPostsCount(App\Model\User $o_user) : int
  {
    // Получить цифру - количество пользователей
    // Query::HYDRATE_SINGLE_SCALAR mode
    $c_dql = 'SELECT COUNT(p.id) FROM App\Model\POST p WHERE p.user =:user ';
    $n_total_records_count = $this->_em->createQuery($c_dql)
      ->setParameter('user', $o_user)
      ->getSingleScalarResult();

    return (int) $n_total_records_count;
  }//end of funciton


  /**
   *
   */
  public function getTotalPostsCount() : int
  {
    // Получить цифру - количество пользователей
    // Query::HYDRATE_SINGLE_SCALAR mode
    $c_dql = 'SELECT COUNT(p.id) FROM App\Model\POST p ';
    $n_total_records_count = $this->_em->createQuery($c_dql)
      ->getSingleScalarResult();

    return (int) $n_total_records_count;
  }//end of funciton


}// end of class
